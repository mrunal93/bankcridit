library(gmodels)
CrossTable(df$color,df$cut)
### to change look of table like elemineting chisqua dec. point
CrossTable(df$color,df$cut, digits = 1,prop.chisq = F, format = "SPSS")
CrossTable(wm$height,wm$weight)
CrossTable(wm$height,wm$weight)
CrossTable(wm$height,wm$weight, digit=1,prop.chisq = F,format = "SPSS")
CrossTable(wm$height,wm$weight, digit=1,prop.chisq = F,format = "SPSS")
dev.new()
CrossTable(wm$height,wm$weight, digit=1,prop.chisq = F,format = "SPSS")
?AirPassengers
data("AirPassengers")
force(AirPassengers)
data("CO2")
force(CO2)
?co2
View(CO2)
str(co2)
data("diamonds")
str(df)
df<-diamonds
str(df)
str(co2)
str(co2)
a<-co2
str(a)
install.package ("ggplot2")
install.packages ("ggplot2")
install.packages("ggplot2")
library(ggplot2)
data("CO2")
a<-co2
str(a)
data("economics")
force(economics)
force(economics)
View(economics)
?economics
data("economics")
a<-economics
dev.new()
dev.new()
hist(a$pce)
par(mfrow=c(3,2))
hist(a$pce)
hist(a$pop)
hist(a$psavert)
hist(a$uempmed)
hist(a$unemploy)
par(mfrow=c(3,3))
hist(a$pce)
hist(a$pop)
hist(a$psavert)
hist(a$uempmed)
hist(a$unemploy)
par(mfrow=c(3,5))
dev.new()
par(mfrow=c(3,5))
hist(a$pce)
hist(a$pop)
hist(a$psavert)
hist(a$uempmed)
hist(a$unemploy)
par(mfrow=c(1,5))
hist(a$pce)
hist(a$pop)
hist(a$psavert)
hist(a$uempmed)
hist(a$unemploy)
dev.new()
par(mfrow=c(1,5))
hist(a$pce)
hist(a$pop)
hist(a$psavert)
hist(a$uempmed)
hist(a$unemploy)
dev.new()
hist(log(a$unemploy))
hist(a$unemploy)
dev.new()
hist(a$unemploy)
dev.new()
hist(log(a$unemploy))
##barplot
table(a$unemploy)
barplot(b)
dev.new()
barplot(b)
table(a$unemploy)
b<-table(a$unemploy)
dev.new()
barplot(b)
install.packages(gmodels)
install.packages("gmodels")
library(gmodels)
CrossTable(a$uempmed,a$unemploy)
CrossTable(a$uempmed,a$unemploy)
data("diamonds")
df<-diamonds
CrossTable(df$cut,df$clarity)
CrossTable(df$clarity,df$cut)
CrossTable(df$clarity,df$cut,digit = 1,prop.chisq = F, format = "SPSS")
crosstable(df$clarity,df$color,digit = 1, prop.chisq = F , format = "SPSS")
crossTable(df$clarity,df$color,digit = 1, prop.chisq = F , format = "SPSS")
crossTable(df$clarity,df$color,digit = 1,prop.chisq = F,format = "SPSS")
crossTable(df$clarity,df$color,digit = 1,prop.chisq = F,format = "SPSS")
crossTable(df$clarity,df$color)
CrossTable(df$clarity,df$color)
CrossTable(df$clarity,df$color,digit = 1,prop.chisq = F, format = "SPSS")
CrossTable(df$color,df$clarity,digit = 1,prop.chisq = F, format = "SPSS")
data('women')
?women
wm <-women
str(wm)
summary(wm)
dev.new()
par(mfrow=c(1,2))
hist(wm$height)
hist(wm$weight)
CrossTable(wm$height,wm$weight)
CrossTable(wm$height,wm$weight, digit=1,prop.chisq = F,format = "SPSS")
CrossTable(wm$weight,wm$height, digit=1,prop.chisq = F,format = "SPSS")
load("~/R/class project/12.RData")
install.packages("mltools")
install.packages("C:/Users/mrunal/Downloads/vlsi/mltools_0.3.5.tar.gz", repos = NULL, type = "source")
library(mltools)
library(data.table)
df5=one_hot(as.data.table(df))
rno<-sample(nrow(df5),nrow(df5)*.7)
trn=df5[rno,]
tst=df5[-rno,]
l1<-lm(trn$Sale_Price~.,data=trn)
summary(l1)
dev.new()
par(mfrow=c(2,2))
plot(l1)
dev.new()
par(mfrow=c(2,2))
plot(l1)
dev.new()
par(mfrow=c(4,1))
plot(l1)
dev.new()
par(mfrow=c(2,2))
plot(l1)
jpiindex<-read.csv(file.choose(),header = T)
jpiindex$X=NULL
jpiindex$X.1=NULL
jpiindex$X.2=NULL
jpiindex$empid=NULL
jpiindex<-read.csv(file.choose(),header = T)
jpiindex$X=NULL
jpiindex$X.1=NULL
jpiindex$X.2=NULL
jpiindex$empid=NULL
str(jpiindex)
install.packages("corrplot")
library(corrplot)
cor1<-cor(jpiindex)
cor1
##by observing crr table dependent variable is coreleted with all independent var and gk and tech are allso corelated this might give multicorelinearity in future so
corrplot(cor1,method = "number",type = "upper")
dev.new()
dev.new()
pairs(~.,data = jpiindex)
jpimodel<-lm(jpi~.,data = jpiindex)
null<-lm(jpi~1,data = jpiindex)
library(car)
###f-stastic is came from f-test that is taking variance and its ratio of variance null and full
###multicol.=VIF[variance inflation factor] use to check whether data contain multicolinearity
install.packages('car')
library(car)
###f-stastic is came from f-test that is taking variance and its ratio of variance null and full
###multicol.=VIF[variance inflation factor] use to check whether data contain multicolinearity
install.packages('car')
library(car)
###f-stastic is came from f-test that is taking variance and its ratio of variance null and full
###multicol.=VIF[variance inflation factor] use to check whether data contain multicolinearity
install.packages('Rcpp')
###f-stastic is came from f-test that is taking variance and its ratio of variance null and full
###multicol.=VIF[variance inflation factor] use to check whether data contain multicolinearity
install.packages('car')
library(car)
vif(jpimodel)# should not be greateer than 5
###f-stastic is came from f-test that is taking variance and its ratio of variance null and full
###multicol.=VIF[variance inflation factor] use to check whether data contain multicolinearity
install.packages('car')
###f-stastic is came from f-test that is taking variance and its ratio of variance null and full
###multicol.=VIF[variance inflation factor] use to check whether data contain multicolinearity
install.packages("car")
###f-stastic is came from f-test that is taking variance and its ratio of variance null and full
###multicol.=VIF[variance inflation factor] use to check whether data contain multicolinearity
install.packages("cran")
#2. insurance
a<-read.csv(file.choose())
summary(a)
#check of outlier
boxplot(a$charges)
quantile(a$charges)
iqr<-16639.913-4740.287
ul<-16639.913+1.5*iqr
# trimming
quantile(a$charges,probs = c(0.99,0.98,0.56))
sub<-subset(a,a$charges<=21914.09)
boxplot(sub$charges)
a1<-subset(a,a$charges<=ul)
dim(a1)
#subset : 2 types [idex/conditional]
split<- sample.split(a1$charges,SplitRatio=0.70)
#subset : 2 types [idex/conditional]
library(catools)
#subset : 2 types [idex/conditional]
install.packages(catools)
#subset : 2 types [idex/conditional]
install.packages("catools")
library(catools)
split<- sample.split(a1$charges,SplitRatio=0.70)
#subset : 2 types [idex/conditional]
install.packages("catools")
#subset : 2 types [idex/conditional]
install.packages("car")
library(catools)
library(car)
install.packages("car")
install.packages("car")
#subset : 2 types [idex/conditional]
install.packages("car")
library(car)
split<- sample.split(a1$charges,SplitRatio=0.70)
split<- sample.split(a1$charges,SplitRatio=0.70)
library(FactoMineR)
install.packages("FactoMineR")
library(FactoMineR)
pca<- PCA(mtcars[,c(1:7,10,11)],scale = TRUE)
summary(pca)
View(pca)
View(pca)
pca$eig
pca$var$coord
library(devtools)
install.packages('devtools')
install.packages("devtools")
install.packages("devtools")
library(devtools)
install_github("vqv/ggbiplot")
install_github("vqv/ggbiplot")
install_github("vqv/ggbiplot")
install.packages("ggbiplot")
library(ggbiplot)
library(devtools)
install.packages('devtools')
library(devtools)
install.packages('devtools')
install.packages('devtools')
library(devtools)
library(devtools)
install.packages('devtools')
library(devtools)
install.packages("devtools")
library(devtools)
install.packages("CRAN")
install.packages("CRAN")
library(devtools)
install.packages("CRAN")
install.packages("CRAN")
install.packages("CRAN")
install.packages("devtools")
devtools::install_github("r-lib/devtools")
install.packages("devtools")
install.packages("devtools")
setwd("D:/r prog/project 1 propert price")
#read files
df<-read.csv(file.choose())
str(df)
#remove id
df$Id<-NULL # IT REMOVE 'ID'
View(df)
View(df)
#summary of data
summary(df) # for factor it onlt give count and level gives number of level and name
levels(df$Zoning_Class)
levels(df$Neighborhood)
summary(df$Overall_Material)
df$Overall_Material<-as.factor(df$Overall_Material)
df$House_Condition<-as.factor(df$House_Condition)
df$Underground_Full_Bathroom<-as.factor(df$Underground_Full_Bathroom)
df$Underground_Half_Bathroom<-as.factor(df$Underground_Half_Bathroom)
df$Half_Bathroom_Above_Grade<-as.factor(df$Half_Bathroom_Above_Grade)
df$Bedroom_Above_Grade<-as.factor(df$Bedroom_Above_Grade)
df$Rooms_Above_Grade<-as.factor(df$Rooms_Above_Grade)
df$Fireplaces<-as.factor(df$Fireplaces)
df$Garage_Size<-as.factor(df$Garage_Size) #even we can exicute all this with for loop
df$Full_Bathroom_Above_Grade<-as.factor(df$Full_Bathroom_Above_Grade)
df$Kitchen_Above_Grade<-as.factor(df$Kitchen_Above_Grade)
str(df)
#data cleaning : missing value imputaion
nas<- apply(df,2,function(M) sum(is.na(M)))
nas
#data cleaning : missing value imputaion
nas<- apply(df,1,function(M) sum(is.na(M)))
nas
#data cleaning : missing value imputaion
nas<- apply(df,2,function(M) sum(is.na(M)))
nas
#data cleaning : missing value imputaion
nas<- apply(df,2,function(M) sum(is.na(M)))
nas
sort(nas, decreasing = T)
is.na(df$Miscellaneous_Feature)
#now to clean the missing data
install.packages("missForest")
#now to clean the missing data
install.packages("missForest")
library(missForest)
set.seed(123) #same repetitation of random number
library(missForest)
dfimp=missForest(df,maxiter = 2,ntree = 20)
dfimp<-dfimp$ximp
# $imp==> imputed values from missForest
#view imputed missing variable
summary(df$Pool_Quality)
summary(dfimp$Pool_Quality)
# $imp==> imputed values from missForest
#view imputed missing variable
summary(df$Miscellaneous_Feature)
summary(dfimp$Miscellaneous_Feature)
df=dfimp
df$Construction_Year=as.factor(df$Construction_Year)
summary(df)
df$Construction_Year=as.factor(df$Construction_Year)
df$Remodel_Year=as.factor(df$Remodel_Year)
df$Garage_Built_Year=as.factor(df$Garage_Built_Year)
df$Year_Sold=as.factor(df$Year_Sold)
df$Garage_Built_Year=as.factor(df$Garage_Built_Year)
library(dplyr)
dfnum<-data.frame(select_if(df,is.numeric))
df_fact<-data.frame(select_if(df,is.factor))
library(RColorBrewer)
dev.new()
display.brewer.all()  # for displaying all the palettes ()
#color palettes selection
shade=brewer.pal(n=8,name='Accent')# n is no. of colors
class(shade)# to check datatype we use datatype
shade=replicate(50,shade)# to replicate more 50 colorshade and store in shade
shade
for (m in 1:7)
{
#names(dfnum), # its display varible name
print(paste('distribution of',
names(dfnum[m]),
sep=' '))
}
### calculate freq. for bar plot
table(df_fact[,1])
dev.new()
barplot(table(df_fact[,1])
)
### calculate freq. for bar plot
table(df_fact[,1])
dev.new()
barplot(table(df_fact[,1])
)
levels(df$Zoning_Class)
table(df_fact[,])
dev.new()
barplot(table(df_fact[,])
)
table(df_fact[,2])
dev.new()
barplot(table(df_fact[,2])
)
### calculate freq. for bar plot
table(df_fact[,3])
dev.new()
barplot(table(df_fact[,3])
)
table(df_fact[,4])
dev.new()
barplot(table(df_fact[,4])
)
#to print for each bar freq. and its %
z99=data.frame(table(df_fact[,1]))
z99
f=z99$Var1
f
z99$p=round((z99$Freq/sum(z99$Freq))*100,1);z99
paste(z99$p,"%",sep="")
z99=data.frame(table(df_fact[,2]))
z99
f=z99$Var1
f
z99$p=round((z99$Freq/sum(z99$Freq))*100,1);z99
paste(z99$p,"%",sep="")
View(df_fact)
View(df_fact)
z99=data.frame(table(df_fact[,9]))
z99
f=z99$Var1
f
z99$p=round((z99$Freq/sum(z99$Freq))*100,1);z99
paste(z99$p,"%",sep="")
jpeg('a2.jpg')
#dev.new()
hist(df$Sale_Price)
dev.off()
ae<-length(df_fact)
ae<-length(df_fact);ae
######
for (m in 1:7)
{
#names(dfnum), # its display varible name
print(paste('distribution of',
names(dfnum[m]),
sep=' '))
}
### calculate freq. for bar plot
table(df_fact[,4])
dev.new()
barplot(table(df_fact[,4])
)
#to get frequency of  catogary in varible/feature
z99=data.frame(table(df_fact[,9]))
z99
f=z99$Var1
f
z99$p=round((z99$Freq/sum(z99$Freq))*100,1);z99
paste(z99$p,"%",sep="")
#how to save plot as images
jpeg('a2.jpg')
#dev.new()
hist(df$Sale_Price)
dev.off()
ae<-length(df_fact);ae
#while loop
j=1
s=1
e=8
while (j<=ae) {
h=paste("bar",e,sep = '_')
## save plot in jpeg format
jpeg(paste(h,'jpg',sep = '.'),
res = 600,width = 12,
height = 6, units = 'in')
par(mfrow=c(2,4))
for (i in s:e) {
# freq.table
zi<-data.frame(table(df_fact[,i]))
#y-axis limit (20% more than max.freq)
yi<-c(0,1.2*max(zi$Freq))
#list of variables
li=zi$Var1
#calculating % of total freq
zi$p<-round((zi$Freq/sum(zi$Freq))*100,1)
#paste '%'sign for % numbers
l2i<-paste(zi$p,'%',sep='')
bi<-barplot(zi$Freq,ylim = yi,col= shade,
main = paste(names(df_fact[i]),
'wise proportions(nos.&%)',sep = ''),
names.arg = levels(df_fact[,i]))#x-axis labels
#sep="\n"==> paste one below the other(next line)
pti<-paste(zi$freq,l2i,sep = '\n')
#addition text to bars
text(bi,labels = pti,col = 'blue',pos = 3,cex = 1)
}# end of for loop pos==>position,cex==>character front
dev.off()#after saving jpeg clear buffer
j<-j+8
s<-e+1
if(e+8>length(df_fact)){
e=length(df_fact)
}else{
e=e+8
}
}
j=1
s=1
e=8
while (j<=length(df_fact)+1) {
h=paste("pie",e,sep = '_')
## save plot in jpeg format
jpeg(paste(h,'jpg',sep = '.'),
res = 600,width = 12,
height = 6, units = 'in')
par(mfrow=c(2,4))
for (i in s:e) {
# freq.table
zi<-data.frame(table(df_fact[,i]))
#y-axis limit (20% more than max.freq)
yi<-c(0,1.2*max(zi$Freq))
#list of variables
li=zi$Var1
#calculating % of total freq
zi$p<-round((zi$Freq/sum(zi$Freq))*100,0)
#paste '%'sign for % numbers
l2i<-paste(li,zi$p,sep=':')
l3i<-paste(l2i,'%',sep = '')
pie(zi$Freq,lebels=l3i,col= shade,
main = paste(names(df_fact[i]),
'wise proportions(nos.&%)',sep = ''),
)
# pti<-paste(zi$freq,l3i,sep = '\n')
#addition text to bars
#text(bi,zi$freq,labels = pti,col = 'blue',pos = 3,cex = 1)
}
dev.off()#after saving jpeg clear buffer
j<-j+8
s<-e+1
if(e+8>length(df_fact)){
e=length(df_fact)
}else{
e=e+8
}
}
